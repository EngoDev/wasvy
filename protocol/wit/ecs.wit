package wasvy:ecs;

/// An example world for the component to target.
// world ecs {
// 	use types.{query-result};
//     export hello-world: func() -> string;
// 	export setup: func();
// 	export sum: func(params: list<query-result>);
// 
// 	import host-ecs;
// }

world host {
	import ecs;
}

interface ecs {
	use types.{entity, query, component-id, component, query-result, query-result-entry};
	register-system: func(name: string, query: list<query>);
	register-component: func(path: string) -> component-id;
	get-component-id: func(path: string) -> option<component-id>;
	spawn: func(components: list<component>) -> entity;

	// For some reason if the type isn't being used by a function, cargo component doesn't generate a binding for it.
	// so this function is only to accumulate types so they are generated.
	this-function-does-nothing: func(entry: query-result-entry, query-result: query-result);
}

interface types {
	type component-id = u64;
	type entity = u64;
	type query-result = list<query-result-entry>;

	record component {
		id: component-id,
		value: string
	}

	record query {
		components: list<component-id>,
		%with: list<component-id>,
		without: list<component-id>
	}

	// This is one row for one query parameter
	record query-result-entry {
		components: list<component>,
		entity: entity
	}
}
