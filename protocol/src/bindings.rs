// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
pub type QueryData = component::protocol::types::QueryData;
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_hello_world_cabi<T: Guest>() -> *mut u8 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::hello_world();
    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
    let vec2 = (result0.into_bytes()).into_boxed_slice();
    let ptr2 = vec2.as_ptr().cast::<u8>();
    let len2 = vec2.len();
    ::core::mem::forget(vec2);
    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
    ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_hello_world<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
    _rt::cabi_dealloc(l0, l1, 1);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_setup_cabi<T: Guest>() {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::setup();
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_sum_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let base11 = arg0;
    let len11 = arg1;
    let mut result11 = _rt::Vec::with_capacity(len11);
    for i in 0..len11 {
        let base = base11.add(i * (2 * ::core::mem::size_of::<*const u8>()));
        let e11 = {
            let l0 = *base.add(0).cast::<*mut u8>();
            let l1 = *base.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
            let base10 = l0;
            let len10 = l1;
            let mut result10 = _rt::Vec::with_capacity(len10);
            for i in 0..len10 {
                let base = base10.add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                let e10 = {
                    let l2 = *base.add(0).cast::<*mut u8>();
                    let l3 = *base
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base8 = l2;
                    let len8 = l3;
                    let mut result8 = _rt::Vec::with_capacity(len8);
                    for i in 0..len8 {
                        let base = base8
                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                        let e8 = {
                            let l4 = *base.add(0).cast::<i64>();
                            let l5 = *base.add(8).cast::<*mut u8>();
                            let l6 = *base
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len7 = l6;
                            let bytes7 = _rt::Vec::from_raw_parts(l5.cast(), len7, len7);
                            component::protocol::types::Component {
                                id: l4 as u64,
                                value: _rt::string_lift(bytes7),
                            }
                        };
                        result8.push(e8);
                    }
                    _rt::cabi_dealloc(
                        base8,
                        len8 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let l9 = *base
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    component::protocol::types::QueryData {
                        components: result8,
                        entity: l9 as u64,
                    }
                };
                result10.push(e10);
            }
            _rt::cabi_dealloc(
                base10,
                len10 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                8,
            );
            result10
        };
        result11.push(e11);
    }
    _rt::cabi_dealloc(
        base11,
        len11 * (2 * ::core::mem::size_of::<*const u8>()),
        ::core::mem::size_of::<*const u8>(),
    );
    T::sum(result11);
}
pub trait Guest {
    fn hello_world() -> _rt::String;
    fn setup() -> ();
    fn sum(params: _rt::Vec<_rt::Vec<QueryData>>) -> ();
}
#[doc(hidden)]
macro_rules! __export_world_ecs_cabi {
    ($ty:ident with_types_in $($path_to_types:tt)*) => {
        const _ : () = { #[unsafe (export_name = "hello-world")] unsafe extern "C" fn
        export_hello_world() -> * mut u8 { unsafe { $($path_to_types)*::
        _export_hello_world_cabi::<$ty > () } } #[unsafe (export_name =
        "cabi_post_hello-world")] unsafe extern "C" fn _post_return_hello_world(arg0 : *
        mut u8,) { unsafe { $($path_to_types)*:: __post_return_hello_world::<$ty > (arg0)
        } } #[unsafe (export_name = "setup")] unsafe extern "C" fn export_setup() {
        unsafe { $($path_to_types)*:: _export_setup_cabi::<$ty > () } } #[unsafe
        (export_name = "sum")] unsafe extern "C" fn export_sum(arg0 : * mut u8, arg1 :
        usize,) { unsafe { $($path_to_types)*:: _export_sum_cabi::<$ty > (arg0, arg1) } }
        };
    };
}
#[doc(hidden)]
pub(crate) use __export_world_ecs_cabi;
#[cfg_attr(target_pointer_width = "64", repr(align(8)))]
#[cfg_attr(target_pointer_width = "32", repr(align(4)))]
struct _RetArea([::core::mem::MaybeUninit<u8>; 2 * ::core::mem::size_of::<*const u8>()]);
static mut _RET_AREA: _RetArea = _RetArea(
    [::core::mem::MaybeUninit::uninit(); 2 * ::core::mem::size_of::<*const u8>()],
);
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod component {
    pub mod protocol {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// type component-id = tuple<u64,u64>;
            pub type ComponentId = u64;
            pub type Entity = u64;
            #[derive(Clone)]
            pub struct Component {
                pub id: ComponentId,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for Component {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Component")
                        .field("id", &self.id)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Query {
                pub components: _rt::Vec<ComponentId>,
            }
            impl ::core::fmt::Debug for Query {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Query")
                        .field("components", &self.components)
                        .finish()
                }
            }
            /// This is one row for one query parameter
            #[derive(Clone)]
            pub struct QueryData {
                pub components: _rt::Vec<Component>,
                pub entity: Entity,
            }
            impl ::core::fmt::Debug for QueryData {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("QueryData")
                        .field("components", &self.components)
                        .field("entity", &self.entity)
                        .finish()
                }
            }
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod host_ecs {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Entity = super::super::super::component::protocol::types::Entity;
            pub type Query = super::super::super::component::protocol::types::Query;
            pub type ComponentId = super::super::super::component::protocol::types::ComponentId;
            pub type Component = super::super::super::component::protocol::types::Component;
            #[allow(unused_unsafe, clippy::all)]
            pub fn register_system(name: &str, query: &[Query]) -> () {
                unsafe {
                    let vec0 = name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec3 = query;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec3.len() * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let super::super::super::component::protocol::types::Query {
                                components: components1,
                            } = e;
                            let vec2 = components1;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len2;
                            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "component:protocol/host-ecs")]
                    unsafe extern "C" {
                        #[link_name = "register-system"]
                        fn wit_import4(_: *mut u8, _: usize, _: *mut u8, _: usize);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import4(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import4(ptr0.cast_mut(), len0, result3, len3) };
                    if layout3.size() != 0 {
                        _rt::alloc::dealloc(result3.cast(), layout3);
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// register-component: func(path: string, descriptor: component-descriptor) -> component-id;
            pub fn register_component(path: &str) -> ComponentId {
                unsafe {
                    let vec0 = path;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "component:protocol/host-ecs")]
                    unsafe extern "C" {
                        #[link_name = "register-component"]
                        fn wit_import1(_: *mut u8, _: usize) -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import1(ptr0.cast_mut(), len0) };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get_component_id(path: &str) -> Option<ComponentId> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let vec0 = path;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "component:protocol/host-ecs")]
                    unsafe extern "C" {
                        #[link_name = "get-component-id"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result5 = match l3 {
                        0 => None,
                        1 => {
                            let e = {
                                let l4 = *ptr1.add(8).cast::<i64>();
                                l4 as u64
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result5
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn spawn(components: &[Component]) -> Entity {
                unsafe {
                    let vec2 = components;
                    let len2 = vec2.len();
                    let layout2 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec2.len() * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result2 = if layout2.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout2).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout2);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec2.into_iter().enumerate() {
                        let base = result2
                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let super::super::super::component::protocol::types::Component {
                                id: id0,
                                value: value0,
                            } = e;
                            *base.add(0).cast::<i64>() = _rt::as_i64(id0);
                            let vec1 = value0;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            *base
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len1;
                            *base.add(8).cast::<*mut u8>() = ptr1.cast_mut();
                        }
                    }
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "component:protocol/host-ecs")]
                    unsafe extern "C" {
                        #[link_name = "spawn"]
                        fn wit_import3(_: *mut u8, _: usize) -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(_: *mut u8, _: usize) -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import3(result2, len2) };
                    if layout2.size() != 0 {
                        _rt::alloc::dealloc(result2.cast(), layout2);
                    }
                    ret as u64
                }
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::alloc;
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_ecs_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: __export_world_ecs_cabi!($ty with_types_in
        $($path_to_types_root)*);
    };
}
#[doc(inline)]
pub(crate) use __export_ecs_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:component:protocol:ecs:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 826] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xc0\x05\x01A\x02\x01\
A\x13\x01B\x0e\x01w\x04\0\x0ccomponent-id\x03\0\0\x01w\x04\0\x06entity\x03\0\x02\
\x01r\x03\x04names\x04sizew\x09alignmentw\x04\0\x14component-descriptor\x03\0\x04\
\x01r\x02\x02id\x01\x05values\x04\0\x09component\x03\0\x06\x01p\x01\x01r\x01\x0a\
components\x08\x04\0\x05query\x03\0\x09\x01p\x07\x01r\x02\x0acomponents\x0b\x06e\
ntity\x03\x04\0\x0aquery-data\x03\0\x0c\x03\0\x18component:protocol/types\x05\0\x02\
\x03\0\0\x0aquery-data\x03\0\x0aquery-data\x03\0\x01\x02\x03\0\0\x06entity\x02\x03\
\0\0\x05query\x02\x03\0\0\x0ccomponent-id\x02\x03\0\0\x09component\x02\x03\0\0\x14\
component-descriptor\x01B\x15\x02\x03\x02\x01\x03\x04\0\x06entity\x03\0\0\x02\x03\
\x02\x01\x04\x04\0\x05query\x03\0\x02\x02\x03\x02\x01\x05\x04\0\x0ccomponent-id\x03\
\0\x04\x02\x03\x02\x01\x06\x04\0\x09component\x03\0\x06\x02\x03\x02\x01\x07\x04\0\
\x14component-descriptor\x03\0\x08\x01p\x03\x01@\x02\x04names\x05query\x0a\x01\0\
\x04\0\x0fregister-system\x01\x0b\x01@\x01\x04paths\0\x05\x04\0\x12register-comp\
onent\x01\x0c\x01k\x05\x01@\x01\x04paths\0\x0d\x04\0\x10get-component-id\x01\x0e\
\x01p\x07\x01@\x01\x0acomponents\x0f\0\x01\x04\0\x05spawn\x01\x10\x03\0\x1bcompo\
nent:protocol/host-ecs\x05\x08\x01@\0\0s\x04\0\x0bhello-world\x01\x09\x01@\0\x01\
\0\x04\0\x05setup\x01\x0a\x01p\x02\x01p\x0b\x01@\x01\x06params\x0c\x01\0\x04\0\x03\
sum\x01\x0d\x04\0\x16component:protocol/ecs\x04\0\x0b\x09\x01\0\x03ecs\x03\0\0\0\
G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindge\
n-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
