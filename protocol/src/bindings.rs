// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasvy {
    pub mod ecs {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type ComponentId = u64;
            pub type Entity = u64;
            #[derive(Clone)]
            pub struct Component {
                pub id: ComponentId,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for Component {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Component")
                        .field("id", &self.id)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Query {
                pub components: _rt::Vec<ComponentId>,
                pub with: _rt::Vec<ComponentId>,
                pub without: _rt::Vec<ComponentId>,
            }
            impl ::core::fmt::Debug for Query {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Query")
                        .field("components", &self.components)
                        .field("with", &self.with)
                        .field("without", &self.without)
                        .finish()
                }
            }
        }
        /// An example world for the component to target.
        /// world ecs {
        /// 	use types.{query-result};
        ///     export hello-world: func() -> string;
        /// 	export setup: func();
        /// 	export sum: func(params: list<query-result>);
        ///
        /// 	import host-ecs;
        /// }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod ecs {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Entity = super::super::super::wasvy::ecs::types::Entity;
            pub type Query = super::super::super::wasvy::ecs::types::Query;
            pub type ComponentId = super::super::super::wasvy::ecs::types::ComponentId;
            pub type Component = super::super::super::wasvy::ecs::types::Component;
            #[allow(unused_unsafe, clippy::all)]
            pub fn register_system(name: &str, query: &[Query]) -> () {
                unsafe {
                    let vec0 = name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec5 = query;
                    let len5 = vec5.len();
                    let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec5.len() * (6 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result5 = if layout5.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout5);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec5.into_iter().enumerate() {
                        let base = result5
                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                        {
                            let super::super::super::wasvy::ecs::types::Query {
                                components: components1,
                                with: with1,
                                without: without1,
                            } = e;
                            let vec2 = components1;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len2;
                            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                            let vec3 = with1;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr3.cast_mut();
                            let vec4 = without1;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            *base
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *base
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                        }
                    }
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasvy:ecs/ecs")]
                    unsafe extern "C" {
                        #[link_name = "register-system"]
                        fn wit_import6(_: *mut u8, _: usize, _: *mut u8, _: usize);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import6(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import6(ptr0.cast_mut(), len0, result5, len5) };
                    if layout5.size() != 0 {
                        _rt::alloc::dealloc(result5.cast(), layout5);
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn register_component(path: &str) -> ComponentId {
                unsafe {
                    let vec0 = path;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasvy:ecs/ecs")]
                    unsafe extern "C" {
                        #[link_name = "register-component"]
                        fn wit_import1(_: *mut u8, _: usize) -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import1(ptr0.cast_mut(), len0) };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get_component_id(path: &str) -> Option<ComponentId> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let vec0 = path;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasvy:ecs/ecs")]
                    unsafe extern "C" {
                        #[link_name = "get-component-id"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result5 = match l3 {
                        0 => None,
                        1 => {
                            let e = {
                                let l4 = *ptr1.add(8).cast::<i64>();
                                l4 as u64
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result5
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn spawn(components: &[Component]) -> Entity {
                unsafe {
                    let vec2 = components;
                    let len2 = vec2.len();
                    let layout2 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec2.len() * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result2 = if layout2.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout2).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout2);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec2.into_iter().enumerate() {
                        let base = result2
                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let super::super::super::wasvy::ecs::types::Component {
                                id: id0,
                                value: value0,
                            } = e;
                            *base.add(0).cast::<i64>() = _rt::as_i64(id0);
                            let vec1 = value0;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            *base
                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len1;
                            *base.add(8).cast::<*mut u8>() = ptr1.cast_mut();
                        }
                    }
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasvy:ecs/ecs")]
                    unsafe extern "C" {
                        #[link_name = "spawn"]
                        fn wit_import3(_: *mut u8, _: usize) -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(_: *mut u8, _: usize) -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import3(result2, len2) };
                    if layout2.size() != 0 {
                        _rt::alloc::dealloc(result2.cast(), layout2);
                    }
                    ret as u64
                }
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::alloc;
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    extern crate alloc as alloc_crate;
}
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:wasvy:host:host:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 639] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x84\x04\x01A\x02\x01\
A\x08\x01B\x0e\x01w\x04\0\x0ccomponent-id\x03\0\0\x01w\x04\0\x06entity\x03\0\x02\
\x01r\x02\x02id\x01\x05values\x04\0\x09component\x03\0\x04\x01p\x01\x01r\x03\x0a\
components\x06\x04with\x06\x07without\x06\x04\0\x05query\x03\0\x07\x01p\x05\x01r\
\x02\x0acomponents\x09\x06entity\x03\x04\0\x12query-result-entry\x03\0\x0a\x01p\x0b\
\x04\0\x0cquery-result\x03\0\x0c\x03\0\x0fwasvy:ecs/types\x05\0\x02\x03\0\0\x06e\
ntity\x02\x03\0\0\x05query\x02\x03\0\0\x0ccomponent-id\x02\x03\0\0\x09component\x01\
B\x13\x02\x03\x02\x01\x01\x04\0\x06entity\x03\0\0\x02\x03\x02\x01\x02\x04\0\x05q\
uery\x03\0\x02\x02\x03\x02\x01\x03\x04\0\x0ccomponent-id\x03\0\x04\x02\x03\x02\x01\
\x04\x04\0\x09component\x03\0\x06\x01p\x03\x01@\x02\x04names\x05query\x08\x01\0\x04\
\0\x0fregister-system\x01\x09\x01@\x01\x04paths\0\x05\x04\0\x12register-componen\
t\x01\x0a\x01k\x05\x01@\x01\x04paths\0\x0b\x04\0\x10get-component-id\x01\x0c\x01\
p\x07\x01@\x01\x0acomponents\x0d\0\x01\x04\0\x05spawn\x01\x0e\x03\0\x0dwasvy:ecs\
/ecs\x05\x05\x04\0\x0fwasvy:host/host\x04\0\x0b\x0a\x01\0\x04host\x03\0\0\0G\x09\
producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rus\
t\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
