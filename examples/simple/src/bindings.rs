// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
pub type QueryResult = wasvy::ecs::types::QueryResult;
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_hello_world_cabi<T: Guest>() -> *mut u8 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let result0 = T::hello_world();
    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
    let vec2 = (result0.into_bytes()).into_boxed_slice();
    let ptr2 = vec2.as_ptr().cast::<u8>();
    let len2 = vec2.len();
    ::core::mem::forget(vec2);
    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
    ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_hello_world<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
    _rt::cabi_dealloc(l0, l1, 1);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_print_first_component_system_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let base13 = arg0;
    let len13 = arg1;
    let mut result13 = _rt::Vec::with_capacity(len13);
    for i in 0..len13 {
        let base = base13.add(i * (2 * ::core::mem::size_of::<*const u8>()));
        let e13 = {
            let l0 = *base.add(0).cast::<*mut u8>();
            let l1 = *base.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
            let base12 = l0;
            let len12 = l1;
            let mut result12 = _rt::Vec::with_capacity(len12);
            for i in 0..len12 {
                let base = base12.add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                let e12 = {
                    let l2 = *base.add(0).cast::<*mut u8>();
                    let l3 = *base
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base10 = l2;
                    let len10 = l3;
                    let mut result10 = _rt::Vec::with_capacity(len10);
                    for i in 0..len10 {
                        let base = base10
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e10 = {
                            let l4 = *base.add(0).cast::<*mut u8>();
                            let l5 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len6 = l5;
                            let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                            let l7 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l8 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len9 = l8;
                            let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);
                            wasvy::ecs::types::Component {
                                path: _rt::string_lift(bytes6),
                                value: _rt::string_lift(bytes9),
                            }
                        };
                        result10.push(e10);
                    }
                    _rt::cabi_dealloc(
                        base10,
                        len10 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l11 = *base
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    wasvy::ecs::types::QueryResultEntry {
                        components: result10,
                        entity: l11 as u64,
                    }
                };
                result12.push(e12);
            }
            _rt::cabi_dealloc(
                base12,
                len12 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                8,
            );
            result12
        };
        result13.push(e13);
    }
    _rt::cabi_dealloc(
        base13,
        len13 * (2 * ::core::mem::size_of::<*const u8>()),
        ::core::mem::size_of::<*const u8>(),
    );
    T::print_first_component_system(result13);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_two_components_in_a_query_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
) {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let base13 = arg0;
    let len13 = arg1;
    let mut result13 = _rt::Vec::with_capacity(len13);
    for i in 0..len13 {
        let base = base13.add(i * (2 * ::core::mem::size_of::<*const u8>()));
        let e13 = {
            let l0 = *base.add(0).cast::<*mut u8>();
            let l1 = *base.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
            let base12 = l0;
            let len12 = l1;
            let mut result12 = _rt::Vec::with_capacity(len12);
            for i in 0..len12 {
                let base = base12.add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                let e12 = {
                    let l2 = *base.add(0).cast::<*mut u8>();
                    let l3 = *base
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base10 = l2;
                    let len10 = l3;
                    let mut result10 = _rt::Vec::with_capacity(len10);
                    for i in 0..len10 {
                        let base = base10
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e10 = {
                            let l4 = *base.add(0).cast::<*mut u8>();
                            let l5 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len6 = l5;
                            let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                            let l7 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l8 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len9 = l8;
                            let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);
                            wasvy::ecs::types::Component {
                                path: _rt::string_lift(bytes6),
                                value: _rt::string_lift(bytes9),
                            }
                        };
                        result10.push(e10);
                    }
                    _rt::cabi_dealloc(
                        base10,
                        len10 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l11 = *base
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    wasvy::ecs::types::QueryResultEntry {
                        components: result10,
                        entity: l11 as u64,
                    }
                };
                result12.push(e12);
            }
            _rt::cabi_dealloc(
                base12,
                len12 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                8,
            );
            result12
        };
        result13.push(e13);
    }
    _rt::cabi_dealloc(
        base13,
        len13 * (2 * ::core::mem::size_of::<*const u8>()),
        ::core::mem::size_of::<*const u8>(),
    );
    T::two_components_in_a_query(result13);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_setup_cabi<T: Guest>() {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::setup();
}
pub trait Guest {
    /// This exported function can't be called automatically from Wasvy
    /// because it doesn't comply to the desired signature.
    fn hello_world() -> _rt::String;
    /// All systems must only have one argument of type `list<query-result>`
    fn print_first_component_system(params: _rt::Vec<QueryResult>) -> ();
    fn two_components_in_a_query(params: _rt::Vec<QueryResult>) -> ();
    /// This function is called once on startup for each WASM component (Not Bevy component).
    fn setup() -> ();
}
#[doc(hidden)]
macro_rules! __export_world_example_cabi {
    ($ty:ident with_types_in $($path_to_types:tt)*) => {
        const _ : () = { #[unsafe (export_name = "hello-world")] unsafe extern "C" fn
        export_hello_world() -> * mut u8 { unsafe { $($path_to_types)*::
        _export_hello_world_cabi::<$ty > () } } #[unsafe (export_name =
        "cabi_post_hello-world")] unsafe extern "C" fn _post_return_hello_world(arg0 : *
        mut u8,) { unsafe { $($path_to_types)*:: __post_return_hello_world::<$ty > (arg0)
        } } #[unsafe (export_name = "print-first-component-system")] unsafe extern "C" fn
        export_print_first_component_system(arg0 : * mut u8, arg1 : usize,) { unsafe {
        $($path_to_types)*:: _export_print_first_component_system_cabi::<$ty > (arg0,
        arg1) } } #[unsafe (export_name = "two-components-in-a-query")] unsafe extern "C"
        fn export_two_components_in_a_query(arg0 : * mut u8, arg1 : usize,) { unsafe {
        $($path_to_types)*:: _export_two_components_in_a_query_cabi::<$ty > (arg0, arg1)
        } } #[unsafe (export_name = "setup")] unsafe extern "C" fn export_setup() {
        unsafe { $($path_to_types)*:: _export_setup_cabi::<$ty > () } } };
    };
}
#[doc(hidden)]
pub(crate) use __export_world_example_cabi;
#[cfg_attr(target_pointer_width = "64", repr(align(8)))]
#[cfg_attr(target_pointer_width = "32", repr(align(4)))]
struct _RetArea([::core::mem::MaybeUninit<u8>; 2 * ::core::mem::size_of::<*const u8>()]);
static mut _RET_AREA: _RetArea = _RetArea(
    [::core::mem::MaybeUninit::uninit(); 2 * ::core::mem::size_of::<*const u8>()],
);
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasvy {
    pub mod ecs {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type ComponentId = u64;
            pub type Entity = u64;
            /// This is the translation object between bevy Rust `Component` and a bevy `Component` that is registerd in WASM.
            ///
            /// `value` is the JSON serialized version of the actual component that is being passed between WASM and Bevy.
            /// So for every instance of `component` make sure you deserialize it yourself to the struct that it actually is.
            #[derive(Clone)]
            pub struct Component {
                pub path: _rt::String,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for Component {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Component")
                        .field("path", &self.path)
                        .field("value", &self.value)
                        .finish()
                }
            }
            /// This is the translation object between bevy `Query` and WASM query that can be used for registering systems.
            ///
            /// For example if we had the following bevy `Query`: `Query<&Name, Without<Transform>`
            /// It would look like this as a WASM `query` object:
            /// `query {
            /// 		components: [functions:get-component-id("Name")],
            /// 		without: [functions:get-component-id("Transform")],
            /// }
            ///
            /// # Important
            ///
            /// The index for each component-id you put in `components` matters because that will be the order
            /// of retrival from the param argument in your system.
            #[derive(Clone)]
            pub struct Query {
                pub components: _rt::Vec<_rt::String>,
                pub with: _rt::Vec<_rt::String>,
                pub without: _rt::Vec<_rt::String>,
            }
            impl ::core::fmt::Debug for Query {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Query")
                        .field("components", &self.components)
                        .field("with", &self.with)
                        .field("without", &self.without)
                        .finish()
                }
            }
            /// This is one row for a query parameter
            ///
            /// For example if we take the following bevy system:
            ///
            /// fn system(first_query: Query<(&Name, &Transform)>) {}
            ///
            /// query-result-entry is equal to one entry in `first_query`
            #[derive(Clone)]
            pub struct QueryResultEntry {
                pub components: _rt::Vec<Component>,
                pub entity: Entity,
            }
            impl ::core::fmt::Debug for QueryResultEntry {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("QueryResultEntry")
                        .field("components", &self.components)
                        .field("entity", &self.entity)
                        .finish()
                }
            }
            /// This is the aggregation of all the results that come back from bevy Query.
            ///
            /// For example if we take the following bevy system:
            ///
            /// fn system(first_query: Query<(&Name, &Transform)>) {}
            ///
            /// query-result is equal to `first_query`
            pub type QueryResult = _rt::Vec<QueryResultEntry>;
        }
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod functions {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Entity = super::super::super::wasvy::ecs::types::Entity;
            pub type Query = super::super::super::wasvy::ecs::types::Query;
            pub type ComponentId = super::super::super::wasvy::ecs::types::ComponentId;
            pub type Component = super::super::super::wasvy::ecs::types::Component;
            pub type QueryResult = super::super::super::wasvy::ecs::types::QueryResult;
            pub type QueryResultEntry = super::super::super::wasvy::ecs::types::QueryResultEntry;
            #[allow(unused_unsafe, clippy::all)]
            pub fn register_system(name: &str, queries: &[Query]) -> () {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    let vec0 = name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec8 = queries;
                    let len8 = vec8.len();
                    let layout8 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec8.len() * (6 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result8 = if layout8.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout8);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec8.into_iter().enumerate() {
                        let base = result8
                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                        {
                            let super::super::super::wasvy::ecs::types::Query {
                                components: components1,
                                with: with1,
                                without: without1,
                            } = e;
                            let vec3 = components1;
                            let len3 = vec3.len();
                            let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec3.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result3 = if layout3.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout3);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec3.into_iter().enumerate() {
                                let base = result3
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let vec2 = e;
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len2;
                                    *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                                }
                            }
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *base.add(0).cast::<*mut u8>() = result3;
                            let vec5 = with1;
                            let len5 = vec5.len();
                            let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec5.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result5 = if layout5.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout5);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec5.into_iter().enumerate() {
                                let base = result5
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let vec4 = e;
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                                }
                            }
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len5;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result5;
                            let vec7 = without1;
                            let len7 = vec7.len();
                            let layout7 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec7.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result7 = if layout7.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout7);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec7.into_iter().enumerate() {
                                let base = result7
                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let vec6 = e;
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                }
                            }
                            *base
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len7;
                            *base
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result7;
                            cleanup_list
                                .extend_from_slice(
                                    &[
                                        (result3, layout3),
                                        (result5, layout5),
                                        (result7, layout7),
                                    ],
                                );
                        }
                    }
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasvy:ecs/functions")]
                    unsafe extern "C" {
                        #[link_name = "register-system"]
                        fn wit_import9(_: *mut u8, _: usize, _: *mut u8, _: usize);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import9(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import9(ptr0.cast_mut(), len0, result8, len8) };
                    if layout8.size() != 0 {
                        _rt::alloc::dealloc(result8.cast(), layout8);
                    }
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn register_component(path: &str) -> ComponentId {
                unsafe {
                    let vec0 = path;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasvy:ecs/functions")]
                    unsafe extern "C" {
                        #[link_name = "register-component"]
                        fn wit_import1(_: *mut u8, _: usize) -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import1(ptr0.cast_mut(), len0) };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn get_component_id(path: &str) -> Option<ComponentId> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let vec0 = path;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasvy:ecs/functions")]
                    unsafe extern "C" {
                        #[link_name = "get-component-id"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result5 = match l3 {
                        0 => None,
                        1 => {
                            let e = {
                                let l4 = *ptr1.add(8).cast::<i64>();
                                l4 as u64
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result5
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn spawn(components: &[Component]) -> Entity {
                unsafe {
                    let vec3 = components;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec3.len() * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let super::super::super::wasvy::ecs::types::Component {
                                path: path0,
                                value: value0,
                            } = e;
                            let vec1 = path0;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len1;
                            *base.add(0).cast::<*mut u8>() = ptr1.cast_mut();
                            let vec2 = value0;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len2;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasvy:ecs/functions")]
                    unsafe extern "C" {
                        #[link_name = "spawn"]
                        fn wit_import4(_: *mut u8, _: usize) -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import4(_: *mut u8, _: usize) -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import4(result3, len3) };
                    if layout3.size() != 0 {
                        _rt::alloc::dealloc(result3.cast(), layout3);
                    }
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// For some reason if the type isn't being used by a function, cargo component doesn't generate a binding for it.
            /// so this function is only to accumulate types so they are generated.
            pub fn this_function_does_nothing(
                entry: &QueryResultEntry,
                query_result: &[super::super::super::wasvy::ecs::types::QueryResultEntry],
            ) -> () {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    let super::super::super::wasvy::ecs::types::QueryResultEntry {
                        components: components0,
                        entity: entity0,
                    } = entry;
                    let vec4 = components0;
                    let len4 = vec4.len();
                    let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec4.len() * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result4 = if layout4.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout4);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec4.into_iter().enumerate() {
                        let base = result4
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let super::super::super::wasvy::ecs::types::Component {
                                path: path1,
                                value: value1,
                            } = e;
                            let vec2 = path1;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len2;
                            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                            let vec3 = value1;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    }
                    let vec10 = query_result;
                    let len10 = vec10.len();
                    let layout10 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec10.len() * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result10 = if layout10.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout10).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout10);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec10.into_iter().enumerate() {
                        let base = result10
                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let super::super::super::wasvy::ecs::types::QueryResultEntry {
                                components: components5,
                                entity: entity5,
                            } = e;
                            let vec9 = components5;
                            let len9 = vec9.len();
                            let layout9 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec9.len() * (4 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result9 = if layout9.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout9).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout9);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec9.into_iter().enumerate() {
                                let base = result9
                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::wasvy::ecs::types::Component {
                                        path: path6,
                                        value: value6,
                                    } = e;
                                    let vec7 = path6;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *base.add(0).cast::<*mut u8>() = ptr7.cast_mut();
                                    let vec8 = value6;
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                }
                            }
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len9;
                            *base.add(0).cast::<*mut u8>() = result9;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<i64>() = _rt::as_i64(entity5);
                            cleanup_list.extend_from_slice(&[(result9, layout9)]);
                        }
                    }
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasvy:ecs/functions")]
                    unsafe extern "C" {
                        #[link_name = "this-function-does-nothing"]
                        fn wit_import11(
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import11(
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import11(
                            result4,
                            len4,
                            _rt::as_i64(entity0),
                            result10,
                            len10,
                        )
                    };
                    if layout4.size() != 0 {
                        _rt::alloc::dealloc(result4.cast(), layout4);
                    }
                    if layout10.size() != 0 {
                        _rt::alloc::dealloc(result10.cast(), layout10);
                    }
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::alloc;
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_example_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: __export_world_example_cabi!($ty with_types_in
        $($path_to_types_root)*);
    };
}
#[doc(inline)]
pub(crate) use __export_example_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:component:simple:example:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 943] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xb1\x06\x01A\x02\x01\
A\x13\x01B\x0e\x01w\x04\0\x0ccomponent-id\x03\0\0\x01w\x04\0\x06entity\x03\0\x02\
\x01r\x02\x04paths\x05values\x04\0\x09component\x03\0\x04\x01ps\x01r\x03\x0acomp\
onents\x06\x04with\x06\x07without\x06\x04\0\x05query\x03\0\x07\x01p\x05\x01r\x02\
\x0acomponents\x09\x06entity\x03\x04\0\x12query-result-entry\x03\0\x0a\x01p\x0b\x04\
\0\x0cquery-result\x03\0\x0c\x03\0\x0fwasvy:ecs/types\x05\0\x02\x03\0\0\x0cquery\
-result\x03\0\x0cquery-result\x03\0\x01\x02\x03\0\0\x06entity\x02\x03\0\0\x05que\
ry\x02\x03\0\0\x0ccomponent-id\x02\x03\0\0\x09component\x02\x03\0\0\x12query-res\
ult-entry\x01B\x19\x02\x03\x02\x01\x03\x04\0\x06entity\x03\0\0\x02\x03\x02\x01\x04\
\x04\0\x05query\x03\0\x02\x02\x03\x02\x01\x05\x04\0\x0ccomponent-id\x03\0\x04\x02\
\x03\x02\x01\x06\x04\0\x09component\x03\0\x06\x02\x03\x02\x01\x01\x04\0\x0cquery\
-result\x03\0\x08\x02\x03\x02\x01\x07\x04\0\x12query-result-entry\x03\0\x0a\x01p\
\x03\x01@\x02\x04names\x07queries\x0c\x01\0\x04\0\x0fregister-system\x01\x0d\x01\
@\x01\x04paths\0\x05\x04\0\x12register-component\x01\x0e\x01k\x05\x01@\x01\x04pa\
ths\0\x0f\x04\0\x10get-component-id\x01\x10\x01p\x07\x01@\x01\x0acomponents\x11\0\
\x01\x04\0\x05spawn\x01\x12\x01@\x02\x05entry\x0b\x0cquery-result\x09\x01\0\x04\0\
\x1athis-function-does-nothing\x01\x13\x03\0\x13wasvy:ecs/functions\x05\x08\x01@\
\0\0s\x04\0\x0bhello-world\x01\x09\x01p\x02\x01@\x01\x06params\x0a\x01\0\x04\0\x1c\
print-first-component-system\x01\x0b\x04\0\x19two-components-in-a-query\x01\x0b\x01\
@\0\x01\0\x04\0\x05setup\x01\x0c\x04\0\x18component:simple/example\x04\0\x0b\x0d\
\x01\0\x07example\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-compone\
nt\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
