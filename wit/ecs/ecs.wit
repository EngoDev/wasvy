package wasvy:ecs;

/// This is the world that the bevy host implements to give ECS functionality to the WASM component.
/// Like `register-system`.
world host {
	import functions;
}

/// This is the world that the WASM guest implements.
/// These are basically the mandatory functons that a WASM component
/// must have for it to be called from the Bevy host.
world guest {
	/// This function is called once on startup for each WASM component (Not Bevy component).
	export setup: func();
}

interface functions {
	use types.{entity, query, component-id, component, query-result, query-result-entry};
	register-system: func(name: string, queries: list<query>);
	register-component: func(path: string) -> component-id;
	get-component-id: func(path: string) -> option<component-id>;
	spawn: func(components: list<component>) -> entity;

	/// For some reason if the type isn't being used by a function, cargo component doesn't generate a binding for it.
	/// so this function is only to accumulate types so they are generated.
	this-function-does-nothing: func(entry: query-result-entry, query-result: query-result);
}

interface types {
	type component-id = u64;
	type entity = u64;

	/// This is the aggregation of all the results that come back from bevy Query.
	///
	/// For example if we take the following bevy system:
	///
	/// fn system(first_query: Query<(&Name, &Transform)>) {}
	///
	/// query-result is equal to `first_query`
	type query-result = list<query-result-entry>;

	/// This is the translation object between bevy Rust `Component` and a bevy `Component` that is registerd in WASM.
	///
	/// `value` is the JSON serialized version of the actual component that is being passed between WASM and Bevy.
	/// So for every instance of `component` make sure you deserialize it yourself to the struct that it actually is.
	record component {
		//id: component-id,
		path: string,
		value: string
	}

	/// This is the translation object between bevy `Query` and WASM query that can be used for registering systems.
	///
	/// For example if we had the following bevy `Query`: `Query<&Name, Without<Transform>`
	/// It would look like this as a WASM `query` object:
	/// `query {
	///		components: [functions:get-component-id("Name")],
	///		without: [functions:get-component-id("Transform")],
	/// }
	///
	/// # Important
	///
	/// The index for each component-id you put in `components` matters because that will be the order
	/// of retrival from the param argument in your system.
	record query {
		components: list<string>,
		%with: list<string>,
		without: list<string>
	}

	/// This is one row for a query parameter
	///
	/// For example if we take the following bevy system:
	///
	/// fn system(first_query: Query<(&Name, &Transform)>) {}
	///
	/// query-result-entry is equal to one entry in `first_query`
	record query-result-entry {
		components: list<component>,
		entity: entity
	}
}
